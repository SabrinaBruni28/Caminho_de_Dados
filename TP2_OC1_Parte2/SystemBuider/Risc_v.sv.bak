
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Risc_v(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// I2C for HSMC  //////////
	I2C_SCLK,
	I2C_SDAT,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	GPIO,

	//////////// HSMC, HSMC connect to HSMC Default //////////
	HSMC_CLKIN_N1,
	HSMC_CLKIN_N2,
	HSMC_CLKIN_P1,
	HSMC_CLKIN_P2,
	HSMC_CLKIN0,
	HSMC_CLKOUT_N1,
	HSMC_CLKOUT_N2,
	HSMC_CLKOUT_P1,
	HSMC_CLKOUT_P2,
	HSMC_CLKOUT0,
	HSMC_D,
	HSMC_RX_D_N,
	HSMC_RX_D_P,
	HSMC_TX_D_N,
	HSMC_TX_D_P 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// I2C for HSMC  //////////
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// GPIO, GPIO connect to GPIO Default //////////
inout 		    [35:0]		GPIO;

//////////// HSMC, HSMC connect to HSMC Default //////////
input 		          		HSMC_CLKIN_N1;
input 		          		HSMC_CLKIN_N2;
input 		          		HSMC_CLKIN_P1;
input 		          		HSMC_CLKIN_P2;
input 		          		HSMC_CLKIN0;
output		          		HSMC_CLKOUT_N1;
output		          		HSMC_CLKOUT_N2;
output		          		HSMC_CLKOUT_P1;
output		          		HSMC_CLKOUT_P2;
output		          		HSMC_CLKOUT0;
inout 		     [3:0]		HSMC_D;
inout 		    [16:0]		HSMC_RX_D_N;
inout 		    [16:0]		HSMC_RX_D_P;
inout 		    [16:0]		HSMC_TX_D_N;
inout 		    [16:0]		HSMC_TX_D_P;


//=======================================================
//  REG/WIRE declarations
//=======================================================
	
	reg [31:0] instrucao;
	reg [31:0][11:0] Memoria_entrada;
	reg [31:0][11:0]Registers_entrada;
	
	wire alu;
	wire mem;
	wire REG;
	wire control;
	wire line;
	wire [11:0] WriteMem;
	
	wire ALUScr;
	wire Branch;
	wire MemRead;
	wire MemtoReg;
	wire MemWrite;
	wire RegWrite;
	
	wire [4:0] rd;
	wire [4:0] rs1;
	wire [4:0] rs2;
	wire [11:0] sum;
	wire [1:0] ALUOp;
	wire [11:0] data1;
	wire [11:0] data2;
	wire [6:0] opcode;
	wire [11:0] linha;
	wire [3:0] ALUcontrol;
	wire [11:0] ALUresult;
	wire [11:0] Writedata;
	wire signed [11:0] ImmGen;
	wire [31:0][11:0] Memoria_saida;
	wire [31:0][11:0] Registers_saida;


//=======================================================
//  Structural coding
//=======================================================


	iniciacao ini(
					.reset(~KEY[3]),
		
					.Registers_saida(Registers_saida),
					.Memoria_saida(Memoria_saida)
	);		
	
	instructions instru(
					.clock(~KEY[0]),
					.linha(linha),
					.Registers_entrada(Registers_saida),
					.Memoria_entrada(Memoria_saida),
		
					.instrucao(instrucao),
					.Registers_saida(Registers_entrada),
					.Memoria_saida(Memoria_entrada)
	);
	
	PC pc (	
		.reset(~KEY[3]),
		.clock(~KEY[0]),
		.line(line),
		.sum(sum),
		.instrucao(instrucao), 
		
		.linha(linha),
		.rd(rd), 
		.rs1(rs1), 
		.rs2(rs2), 
		.opcode(opcode)
	);
	
	Control controle (
		.instrucao(instrucao),
		.opcode(opcode),
		.clock(~KEY[0]),

		.Branch(Branch),
		.MemRead(MemRead),
		.MemtoReg(MemtoReg),
		.ALUOp(ALUOp),
		.MemWrite(MemWrite),
		.ALUScr(ALUScr),
		.RegWrite(RegWrite),
		.ALUcontrol(ALUcontrol),
		.ImmGen(ImmGen),
		.control(control)	
	);
		
	Registradores registers(	
		.rd(rd),
		.rs1(rs1),
		.rs2(rs2),
		.RegWrite(RegWrite),
		.MemWrite(MemWrite),
		.MemRead(MemRead),
		.Branch(Branch),
		.Writedata(Writedata),
		.ALUScr(ALUScr),
		.ImmGen(ImmGen),
		.ALUresult(ALUresult),
		.control(control),
		.mem(mem),
		.Registers_entrada(Registers_entrada),
		
		.Registers_saida(Registers_saida),
		.data1(data1),
		.data2(data2),
		.REG(REG),
		.WriteMem(WriteMem)
	);
		
	ALU  operacao(	
		.data1(data1),
		.data2(data2),
		.ALUcontrol(ALUcontrol),
		.ImmGen(ImmGen),
		.REG(REG),
		.Branch(Branch),
		.linha(linha),
		
		.ALUresult(ALUresult),
		.sum(sum),
		.line(line),
		.alu(alu)	
	);
		
	Memory m(	
		.MemWrite(MemWrite),
		.MemRead(MemRead),
		.MemtoReg(MemtoReg),
		.alu(alu),
		.ALUresult(ALUresult),
		.Memoria_entrada(Memoria_entrada),
		.WriteMem(WriteMem),
			
		.Memoria_saida(Memoria_saida),
		.Writedata(Writedata),
		.mem(mem)
		
	);	
	
	Display d(
		.clock(~KEY[0]),
		.reset(~KEY[3]),
		.linha(linha),
		.displayDez(HEX7),
		.displayUm(HEX6)
	);

endmodule
